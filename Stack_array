#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

// 支持动态增长的栈
typedef int STDataType;
typedef struct Stack
{
	STDataType* _a;
	int _top;		// 栈顶
	int _capacity;  // 容量 
}Stack;
// 初始化栈 
void StackInit(Stack* ps);
// 入栈 
void StackPush(Stack* ps, STDataType data);
// 出栈 
void StackPop(Stack* ps);
// 获取栈顶元素 
STDataType StackTop(Stack* ps);
// 获取栈中有效元素个数 
int StackSize(Stack* ps);
// 检测栈是否为空，如果为空返回非零结果，如果不为空返回0 
int StackEmpty(Stack* ps);
// 销毁栈 
void StackDestroy(Stack* ps);

void StackInit(Stack* ps) {
	ps->_a = NULL;
	ps->_top = 0;
	ps->_capacity = 0;
}
void StackPush(Stack* ps, STDataType data) {
	if (ps->_top == ps->_capacity) {
		size_t newcapacity = ps->_capacity == 0 ? 4 : ps->_capacity * 2;
		STDataType* tmp = realloc(ps->_a, sizeof(STDataType) * newcapacity);
		if (tmp == NULL) {
			printf("realloc fail\n");
		}
		else {
			ps->_a = tmp;
			ps->_capacity *= 2;
		}
	}
	ps->_a[ps->_top++] = data;

}

void StackPop(Stack* ps) {
	assert(ps);
	// 全部出栈
	for (; ps->_top >= 0; ps->_top--) {
		printf("%d->", ps->_a[ps->_top]);
	}
	printf("\n");
	// 只出一个
	//printf("%d\n", ps->_a[ps->_top--]);
}

STDataType StackTop(Stack* ps) {
	assert(ps->_top);
	return ps->_a[ps->_top];
}

int StackSize(Stack* ps) {
	return ps->_top;
}

int StackEmpty(Stack* ps) {
	if (ps->_top > 0) {
		return 0;
	}
	else {
		return -1;
	}
}
void StackDestroy(Stack* ps) {
	while (ps->_top >= 0) {
		ps->_a[ps->_top--] = 0;
	}
	free(ps->_a);
	ps->_capacity = 0;
	ps->_top = 0;
	free(ps);
}

#include <stdio.h>
#include <Windows.h>
#include <time.h>

#define row 10
#define col 13
//三子棋
void menu();
void game();
void initial_board(char board[row][col], int r, int c);
void print(char board[row][col], int r, int c);
void player_comp(char board[row][col], char win_board[3][3]);
int if_win(char win_board[3][3], int r, int c);
int translate_x(int x);
int translate_y(int y);

struct player {
	int x;
	int y;
};

void menu() {
	printf("***************************************************\n");
	printf("***           Welcome to Tic-tac-toe!           ***\n");
	printf("***************************************************\n");
	printf("*********          1.Play       *******************\n");
	printf("*********          2.Exit       *******************\n");
	printf("***************************************************\n");
	printf("***************************************************\n");
	printf("Please Enter your choice[1,2] : [ ]\b\b");


}

void initial_board(char board[row][col], int r, int c) {
	for (int i = 0; i < r; i++) {

		for (int j = 0; j < c; j++) {
			if (i > 0 && (j == 0|| j == 4 || j == 8 || j == 12)) {
				board[i][j] = '|';
			}
			else {
				board[i][j] = ' ';
				if (j != 4 && j != 8 && j > 0 && j < 12 && (i == 0 || i == 3 || i == 6 || i == 9)) {
					board[i][j] = '_';
				}
				else {
					board[i][j] = ' ';
				}
			}
		}
	}
}

void print(char board[row][col], int r, int c) {
	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) {
			printf("%c", board[i][j]);
		}
		printf("\n");
	}
}
//判断 0 - 2之间的格子
int if_win(char win_board[3][3], int r, int c) {
	//一行
	for (int i = 0; i < r; i++) {
		int count_x = 0;
		int comp_count_x = 0;
		for (int j = 0; j < c; j++) {
			if (win_board[i][j] == 'X') {
				count_x++;
			} else if (win_board[i][j] == 'O') {
				comp_count_x++;
			}
		}
		if (count_x == 3) {
			printf("You Win!\n");
			Sleep(3000);
			system("cls");
			return 0;
		} else if (comp_count_x == 3) {
			printf("Computer Win!\n");
			Sleep(3000);
			system("cls");
			return 0;
		}
	}

	for (int j = 0; j < c; j++) {
		int count_y = 0;
		int comp_count_y = 0;
		for (int i = 0; i < r; i++) {
			if (win_board[i][j] == 'X') {
				count_y++;
			} else if (win_board[i][j] == 'O') {
				comp_count_y++;
			}
		}
		if (count_y == 3) {
			printf("You Win!\n");
			Sleep(3000);
			system("cls");
			return 0;
		} else if (comp_count_y == 3) {
			printf("Computer Win!\n");
			Sleep(3000);
			system("cls");
			return 0;
		}
	}
	if (win_board[0][0] == 'X' && win_board[1][1] == 'X' && win_board[2][2] == 'X') {
		printf("You Win!\n");
		Sleep(3000);
		system("cls");
		return 0;
	} else if (win_board[0][0] == 'O' && win_board[1][1] == 'O' && win_board[2][2] == 'O') {
		printf("Computer Win!\n");
		Sleep(3000);
		system("cls");
		return 0;
	}
	if (win_board[2][0] == 'X' && win_board[1][1] == 'X' && win_board[0][2] == 'X') {
		printf("You Win!\n");
		Sleep(3000);
		system("cls");
		return 0;
	} else if (win_board[2][0] == 'O' && win_board[1][1] == 'O' && win_board[0][2] == 'O') {
		printf("Computer Win!\n");
		Sleep(3000);
		system("cls");
		return 0;
	}
	int count = 0;
	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) {
			if (win_board[i][j] == 'X' || win_board[i][j] == 'O') {
				count++;
			}
		}
	}
	if (count == 9) {
		printf("Stalemate\n");
		Sleep(3000);
		return 0;
	}
}

int translate_y(int y) {
	switch (y) {
	case 1: return 2;
		break;
	case 2: return 5;
		break;
	case 3: return 8;
		break;
	default: printf("Computer product wrong !\n");
		break;
	}
}

int translate_x(int x) {
	switch (x) {
	case 1: return 2;
		break;
	case 2: return 6;
		break;
	case 3: return 10;
		break;
	default: printf("Computer product wrong !\n");
		break;
	}
}

void player_comp(char board[row][col], char win_board[3][3]) {
	int X_X, Y_Y;
	int r, c;
	int ret;
	for (int i = 0; i < 3; i++) {
		int count_x = 0;
		for (int j = 0; j < 3; j++) {
			if (win_board[i][j] == 'X') {
				count_x++;
			}
			if (win_board[i][j] == 'O') {
				count_x--;
			}
		}
		if (count_x == -2) {
			ret = 1;
			r = i;
			break;
		}
		else if (count_x == 2) {
			ret = 1;
			r = i;
			break;
		}
	}
	for (int j = 0; j < 3; j++) {
		int count_y = 0;
		for (int i = 0; i < 3; i++) {
			if (win_board[i][j] == 'X') {
				count_y++;
			}
			if (win_board[i][j] == 'O') {
				count_y--;
			}
		}
		if (count_y == -2) {
			ret = 2;
			c = j;
			break;
		}
		else if (count_y == 2) {
			ret = 2;
			c = j;
			break;
		}
	}
	for (int i = 0; i < 3; i++) {
		int count_z = 0;
		if (win_board[i][i] == 'X') {
			count_z++;
		}
		if (win_board[i][i] == 'O') {
			count_z--;
		}
		if (count_z == -2) {
			ret = 3;
			break;
		}
		else if (count_z == 2) {
			ret = 3;
			break;
		}
	}
	for (int i = 2, j = 0; j < 3; i--, j++) {
		int count_z = 0;
		if (win_board[i][j] == 'X') {
			count_z++;
		}
		if (win_board[i][j] == 'O') {
			count_z--;
		}
		if (count_z == -2) {
			ret = 4;
			break;
		}
		else if (count_z == 2) {
			ret = 4;
			break;
		}
	}
	//主动出击
	//一行
	if (ret == 1) {
		for (int j = 0; j < 3; j++) {
			if (win_board[r][j] != 'X' && win_board[r][j] != 'O') {
				Y_Y = translate_y(r + 1);
				X_X = translate_x(j + 1);
				board[Y_Y][X_X] = 'O';
				win_board[r][j] = 'O';
				break;
			}
		}
	}//一列
	else if (ret == 2) {
		for (int i = 0; i < 3; i++) {
			if (win_board[i][c] != 'X' && win_board[i][c] != 'O') {
				Y_Y = translate_y(i + 1);
				X_X = translate_x(c + 1);
				board[Y_Y][X_X] = 'O';
				win_board[i][c] = 'O';
				break;
			}
		}
	}
	//交叉1

	else if (ret == 3) {
		for (int i = 0; i < 3; i++) {
			if (win_board[i][i] != 'X' && win_board[i][i] != 'O') {
				Y_Y = translate_y(i + 1);
				X_X = translate_x(i + 1);
				board[Y_Y][X_X] = 'O';
				win_board[i][i] = 'O';
				break;
			}
		}
	}//交叉2
	else if (ret == 4) {
		for (int i = 2, j = 0; i >= 0, j < 3; i--, j++) {
			if (win_board[i][j] != 'X' && win_board[i][j] != 'O') {
				Y_Y = translate_y(i + 1);
				X_X = translate_x(j + 1);
				board[Y_Y][X_X] = 'O';
				win_board[i][j] = 'O';
				break;
			}
		}

	}
	//随机生成
	else {
		while (1) {
			int x = rand() % 3 + 1;
			int y = rand() % 3 + 1;
			X_X = translate_x(x);
			Y_Y = translate_y(y);
			if (win_board[y - 1][x - 1] != 'X' && win_board[y - 1][x - 1] != 'O') {
				board[Y_Y][X_X] = 'O';
				win_board[y - 1][x - 1] = 'O';
				break;
			}
		}
	}

}


void game() {
	int input = 1;
	char win_board[3][3];
	char board[row][col];
	initial_board(board, row, col);
	print(board, row, col);
	do {
		int x, y;
		struct player* X = (struct player*)malloc(sizeof(struct player));
		printf("Please Enter your coordinate :[   ]:\b\b\b\b\b");
		scanf("%d %d", &X->y, &X->x);
		if (win_board[X->y - 1][X->x - 1] == 'X') {
			printf("\nYou have to enter the points you haven't entered befor\n");
		} else if (win_board[X->y - 1][X->x - 1] != 'O') {
			Sleep(250);
			system("cls");
			switch (X->y) {
			case 1: y = 2;
				break;
			case 2: y = 5;
				break;
			case 3: y = 8;
				break;
			default: printf("Enter wrong Y coordinate !\n");
				break;
			}
			switch (X->x) {
			case 1: x = 2;
				break;
			case 2: x = 6;
				break;
			case 3: x = 10;
				break;
			default: printf("Enter wrong X coordinate !\n");
				break;
			}
			board[y][x] = 'X';
			win_board[X->y - 1][X->x - 1] = 'X';
			printf("You Enter :\n");
			print(board, row, col);
			input = if_win(win_board, 3, 3);
			player_comp(board, win_board);
			printf("Computer Enter :\n");
			print(board, row, col);
			input = if_win(win_board, 3, 3);

		}
		else {
			printf("\nYou can't replace computer's coordinates\n");
		}


		free(X);

	} while (input);

}

int main() {
	srand((unsigned int)time(NULL));
	int input = 1;
	do {
		menu();
		int a;
		scanf("%d", &a);
		switch (a)
		{
		case 1:

			printf("Game Started !\n");
			game();
			break;
		case 2:
			printf("Bye Bye\n");
			input = 0;
			system("pause");
			break;
		default:
			printf("Please Enter 1 or 2 !!!\n");
			Sleep(1500);
			system("cls");
			break;
		}
	} while (input);
}
